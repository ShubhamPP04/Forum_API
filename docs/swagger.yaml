openapi: 3.0.0
info:
  title: Forum API
  version: 1.0.0
  description: A robust, scalable, and well-documented Forum API using Node.js.
servers:
  - url: http://localhost:5000/api
    description: Local Development Server
tags:
  - name: Authentication
    description: User registration and login
  - name: Posts
    description: Forum post operations
  - name: Comments
    description: Comment operations on posts
  - name: Votes
    description: Voting system for posts and comments
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        username:
          type: string
          description: Unique username
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum: [user, admin]
          default: user
        createdAt:
          type: string
          format: date-time
          description: Date of user creation
      required:
        - username
        - email
        - password
    Post:
      type: object
      properties:
        _id:
          type: string
          description: Post ID
        title:
          type: string
          description: Title of the post
        content:
          type: string
          description: Content of the post
        author:
          type: string
          description: ID of the author (User ID)
        upvotes:
          type: integer
          default: 0
        downvotes:
          type: integer
          default: 0
        createdAt:
          type: string
          format: date-time
          description: Date of post creation
        updatedAt:
          type: string
          format: date-time
          description: Date of last update
      required:
        - title
        - content
        - author
    Comment:
      type: object
      properties:
        _id:
          type: string
          description: Comment ID
        content:
          type: string
          description: Content of the comment
        author:
          type: string
          description: ID of the author (User ID)
        post:
          type: string
          description: ID of the associated post
        parentComment:
          type: string
          nullable: true
          description: ID of the parent comment for replies
        upvotes:
          type: integer
          default: 0
        downvotes:
          type: integer
          default: 0
        createdAt:
          type: string
          format: date-time
          description: Date of comment creation
        updatedAt:
          type: string
          format: date-time
          description: Date of last update
      required:
        - content
        - author
        - post
    Vote:
      type: object
      properties:
        _id:
          type: string
          description: Vote ID
        user:
          type: string
          description: ID of the user who voted
        targetType:
          type: string
          enum: [Post, Comment]
          description: Type of item voted on (Post or Comment)
        targetId:
          type: string
          description: ID of the item voted on
        value:
          type: integer
          enum: [1, -1]
          description: Vote value (1 for upvote, -1 for downvote)
        createdAt:
          type: string
          format: date-time
          description: Date of vote creation
      required:
        - user
        - targetType
        - targetId
        - value
security:
  - BearerAuth: []
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minlength: 6
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
        '400':
          description: Invalid input or user already exists
  /auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
        '400':
          description: Invalid credentials
  /posts:
    post:
      summary: Create a new post
      tags:
        - Posts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
              required:
                - title
                - content
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
    get:
      summary: Get all posts
      tags:
        - Posts
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of posts per page
        - in: query
          name: sortBy
          schema:
            type: string
            default: createdAt
            enum: [createdAt, upvotes, downvotes]
          description: Field to sort by
        - in: query
          name: order
          schema:
            type: string
            default: desc
            enum: [asc, desc]
          description: Sort order
        - in: query
          name: author
          schema:
            type: string
          description: Filter by author ID
        - in: query
          name: search
          schema:
            type: string
          description: Search by title or content
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
  /posts/{id}:
    get:
      summary: Get a single post by ID
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the post to retrieve
      responses:
        '200':
          description: A single post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    put:
      summary: Update a post by ID
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the post to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized (not author)
        '404':
          description: Post not found
    delete:
      summary: Delete a post by ID
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the post to delete
      responses:
        '200':
          description: Post deleted successfully
        '401':
          description: Unauthorized (not author)
        '404':
          description: Post not found
  /posts/{postId}/comments:
    post:
      summary: Add a comment to a post
      tags:
        - Comments
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
          description: ID of the post to comment on
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Post not found
    get:
      summary: Get comments for a specific post
      tags:
        - Comments
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
          description: ID of the post to retrieve comments for
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of comments per page
      responses:
        '200':
          description: A list of comments for the post
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
  /comments/{commentId}/replies:
    post:
      summary: Reply to an existing comment
      tags:
        - Comments
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: commentId
          schema:
            type: string
          required: true
          description: ID of the parent comment to reply to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '201':
          description: Reply added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '404':
          description: Parent comment not found
  /comments/{id}:
    put:
      summary: Update a comment by ID
      tags:
        - Comments
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the comment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized (not author)
        '404':
          description: Comment not found
    delete:
      summary: Delete a comment by ID
      tags:
        - Comments
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the comment to delete
      responses:
        '200':
          description: Comment deleted successfully
        '401':
          description: Unauthorized (not author)
        '404':
          description: Comment not found
  /{targetType}/{targetId}/vote:
    post:
      summary: Vote on a post or comment
      tags:
        - Votes
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: targetType
          schema:
            type: string
            enum: [posts, comments]
          required: true
          description: Type of item to vote on (posts or comments)
        - in: path
          name: targetId
          schema:
            type: string
          required: true
          description: ID of the item to vote on
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: integer
                  enum: [1, -1]
              required:
                - value
      responses:
        '200':
          description: Vote changed or removed successfully
        '201':
          description: Vote cast successfully
        '400':
          description: Invalid input or already voted
        '401':
          description: Unauthorized
        '404':
          description: Post or Comment not found